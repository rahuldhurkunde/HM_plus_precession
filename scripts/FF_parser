#!/usr/bin/env python
import sys, os, logging
import argparse as ap
import configparser
import functions as func
import injections as inj
import pycbc
from pycbc import waveform, conversions, filter, types, distributions, detector, psd
import matplotlib.pyplot as plt
import numpy as np
import scipy
import seaborn as sns
import importlib
import time
import matplotlib.gridspec as gridspec
import Pegasus.DAX3 as dax
import pycbc.workflow as wf
import pycbc.workflow.pegasus_workflow as wdax
from pycbc.workflow import WorkflowConfigParser
import h5py


def to_file(path, ifo=None):
    """ Takes a str and returns a pycbc.workflow.pegasus_workflow.File
    instance.
    """
    fil = wdax.File(os.path.basename(path))
    fil.ifo = ifo
    path = os.path.abspath(path)
    fil.PFN(path, "local")
    return fil

# Command line parser
parser = ap.ArgumentParser()
parser.add_argument('-ff', '--ff_config', 
		default = "../../Config/FF_config.ini", 
		help ='specify config file for FF computation')

parser.add_argument('-inj', '--injections', 
		#default = "../injections/injections.hdf", 
		help ='specify injection file')

parser.add_argument('-tb', '--template_bank', 
		#default = "../../banks/parallel/smallbank/combined_bank.hdf", 
		help ='specify template bank')

parser.add_argument('--tau_crawl', 
		default = "../../injections/flat_tau_crawl_1.0.txt", 
		help ='specify tau crawl file')

parser.add_argument("--output_dir", 
		default="output/", 
		help="Path to output directory.")

pycbc.init_logging(True)

# add option groups
wf.add_workflow_command_line_group(parser)

# Parser command line
args, remaining_args = parser.parse_known_args()

# create workflow and sub-workflows
workflow = wf.Workflow(args, "gw")

# make data output and results directories
wf.makedir(args.output_dir)

#File handles for compute_FF workflow
confighand = to_file(args.ff_config)
injhand = to_file(args.injections)
tbhand = to_file(args.template_bank)
tauhand = to_file(args.tau_crawl)

for n in range(len(workflow.ifos)):
	#compute_FF
	FF_exe = wf.Executable(workflow.cp, "FF", ifos=workflow.ifos[n], 
				out_dir=args.output_dir)

	node = FF_exe.create_node()
	node.add_input_opt('--ff_config', confighand)
	node.add_input_opt('--injections', injhand)
	node.add_input_opt('--template_bank', tbhand)
	node.add_input_opt('--tau_crawl', tauhand)
	node.add_opt('--approximant_ind', n)
	FF_file = node.new_output_file_opt(workflow.analysis_time, ".hdf", "--output_file")
	workflow += node

# write dax
workflow.save('gw.dax')
